apiVersion: v1
# Service object
kind: Service
metadata:
  labels:
    name: mysql
  name: mysql
spec:
  ports:
    # the port that this service should serve on
    - port: 3306
  # label keys and values that must match in order to receive traffic for this service
  selector:
    # select Deployments with the name "mysql"
    name: mysql
---
# Kubernetes API version
apiVersion: extensions/v1beta1
# Type of "request" in this case a Deployment
kind: Deployment
# Metadata of the "object"
metadata:
  # Name of the "object"
  name: mysql
spec:
  replicas: 3
  template:
    metadata:
      labels:
        name: mysql
# spec ~= Specificationsof the "object"
    spec:
  # List of Container definitions
      containers:   
    # The "name"/"suffix" of the container name
      - name: mysql
    # What Docker image to use
        image: mysql:latest
        env:
        - name: MYSQL_DATABASE
          value: db-wp
        - name: MYSQL_PASSWORD
          value: Aze123rty123
        - name: MYSQL_ROOT_PASSWORD
          value: Aze123rty123
        - name: MYSQL_USER
          value: rabii2@rabii2
    # List of container ports reachable from within the cluster
        ports:
        - containerPort: 3306
          name: mysql
---
apiVersion: v1
kind: Service
metadata:
  # labels for the service
  labels:
    name: phpmyadmin
  # name of the service
  name: phpmyadmin
spec:
  ports:
    # the port that this service should serve on
    - port: 8081
      # set the target of the port, in this case 8081 -> 80
      targetPort: 80
  # label keys and values that must match in order to receive traffic for this service
  selector:
    # select Deployments with the name "phpmyadmin"
    name: phpmyadmin
---
# Kubernetes API version
apiVersion: extensions/v1beta1
# Type of "request"
kind: Deployment
# Metadata of the "object"
metadata:
  # Name of the "object"
  name: phpmyadmin
  # Labels of the "object"
spec:
  replicas: 3
  template:
    metadata:
      labels:
        name: phpmyadmin
# spec ~= Specificationsof the "object"
    spec:
  # List of Container definitions
      containers:
    # The "name"/"suffix" of the container name
        - name: phpmyadmin
      # What Docker image to use
          image: phpmyadmin/phpmyadmin:latest
          env:
            - name: MYSQL_PASSWORD
              value: Aze123rty123
            - name: MYSQL_USER
              value: rabii2@rabii2
      # List of container ports reachable from within the cluster
          ports:
            - containerPort: 80
              name: phpmyadmin
---
apiVersion: v1
# Service object
kind: Service
metadata:
  # labels for the service
  labels:
    name: rfcweb
  # name of the service
  name: rfcweb
spec:
  ports:
    # the port that this service should serve on
    - port: 80
  # label keys and values that must match in order to receive traffic for this service
  selector:
    # select Deployments with the name "rfcweb"
    name: rfcweb
---
# Kubernetes API version
apiVersion: extensions/v1beta1
# Type of "request"
kind: Deployment
# Metadata of the "object"
metadata:
  # Name of the "object"
  name: rfcweb
spec:
  replicas: 3
  template:
    metadata:
      labels:
        name: rfcweb

    spec:
  # List of Container definitions
      containers:
    # What Docker image to use
        - image: 1739582/rfcweb:#{Build.BuildId}#
      # The "name"/"suffix" of the container name
          name: rfcweb
      # List of environment variables
          env:
            - name: WORDPRESS_DB_HOST
              value: rabii2.mysql.database.azure.com
            - name: WORDPRESS_DB_NAME
              value: db-wp
            - name: WORDPRESS_DB_PASSWORD
              value: Aze123rty123
            - name: WORDPRESS_DB_USER
              value: rabii2@rabii2
      # List of ports to "publish"
          ports:
        # ContainerPort exposes only to the inside of your network, not to the outside
        # To reach the container we create a cluster wide service
            - containerPort: 80
          # gives the port a name
              name: rfcweb

